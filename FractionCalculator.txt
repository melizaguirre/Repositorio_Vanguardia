.data
    welcome_sms: .asciiz "\n\n\t\tBienvenidos a tu Calculadora de Fracciones! \n1.-> Suma.\n2.-> Resta.\n3.-> Multiplicación.\n4.-> División.\n5.-> Simplificación.\n0.-> Salir.\nSu elección es: "
    input1_sms: .asciiz "\tIngrese el numerador de la primera fraccion: "
    input2_sms: .asciiz "\tIngrese el denominador de la primera fraccion: "
    input3_sms: .asciiz "\tIngrese el numerador de la segunda fraccion: "
    input4_sms: .asciiz "\tIngrese el denominador de la segunda fraccion: "
    exit_sms: .asciiz "\n\tGracias por su visita!!!\n\t***Le esperamos pronto***\n"
    exit2_sms: .asciiz "\nLa opcion que ingreso no esta en el menu, intente de nuevo!"
    error1_sms: .asciiz "\tNo se puede realizar ninguna operación! El denominador es 0! Intente de nuevo. "
    div_symbol: .asciiz " / "
    divide_symbol: .asciiz "/"
    add_symbol: .asciiz " + "
    sub_symbol: .asciiz " - "
    mult_symbol: .asciiz " * "
    equal_symbol: .asciiz " = "
    decimal_sms: .asciiz "\n Quiere Su respuesta en decimal? \n1.-> Si. \n2.-> No.\nSu elección es: "
    one: .word 1
    numerator: .space 8  # Arreglo para almacenar los numeradores
    denominator: .space 8 # Arreglo para almacenar los denominadores

.text
.globl main 

main: 
    # Show menu 
    li $v0, 4
    la $a0, welcome_sms
    syscall
    
    # Read menu Option
    li $v0, 5
    syscall 
    move $t0, $v0

    # Check if exit option
    beq $t0, 0, Exit
    bgt $t0, 5, Exit2
    blt $t0, 0, Exit2

    # Ask for first fraction numerator 
    li $v0, 4
    la $a0, input1_sms
    syscall

    # Read for first fraction numerator 
    li $v0, 5
    syscall
    sw $v0, numerator  # Almacenar en el arreglo de numeradores

    # Ask for first fraction denominator
    li $v0, 4
    la $a0, input2_sms
    syscall

    # Read for first fraction denominator
    li $v0, 5
    syscall
    sw $v0, denominator  # Almacenar en el arreglo de denominadores
    
    # Check if denominator is different from 0
    beqz $v0, Undetermined
    
    # Check if simplify option 
    beq $t0, 5, Simplify
    
    # Ask for second fraction numerator 
    li $v0, 4
    la $a0, input3_sms
    syscall

    # Read for second fraction numerator 
    li $v0, 5
    syscall
    sw $v0, numerator+4  # Almacenar en el arreglo de numeradores

    # Ask for second fraction denominator
    li $v0, 4
    la $a0, input4_sms
    syscall

    # Read for second fraction denominator
    li $v0, 5
    syscall
    sw $v0, denominator+4  # Almacenar en el arreglo de denominadores
    
    # Check if denominator is different from 0
    beqz $v0, Undetermined
    
    # Branch off to options
    beq $t0, 1, Add 
    beq $t0, 2, Subtract
    beq $t0, 3, Multiply
    beq $t0, 4, Divide

Exit: 
    # Show exit message 
    li $v0, 4
    la $a0, exit_sms
    syscall
    
    li $v0, 10
    syscall
    
Exit2: 
	li $v0, 4
	la $a0, exit2_sms
	syscall
	j main
     

Simplify:
    # Load numerator and denominator
    lw $t1, numerator
    lw $t2, denominator
    
    # Calculate GCD of numerator and denominator
    move $t6, $t1
    move $t7, $t2
    j SimplifyLoop

SimplifyLoop:
    # if residual is not zero, continue simplifying 
    bne $t7, $zero, SimplifyContinue
    
    # print results
    j PrintSimplify

SimplifyContinue:
    # calculate common denominators 
    rem $t8, $t6, $t7

    # move denominators to find a new greatest denominator 
    move $t6, $t7
    move $t7, $t8

    # check if simplifying is still possible 
    j SimplifyLoop

PrintSimplify:
    # Divide by GCD 
    div $t1, $t1, $t6   
    div $t2, $t2, $t6 

    # Check if denominator is 1
    li $t9, 1
    beq $t2, $t9, PrintInteger

    # print original fraction
    li $v0, 1
    lw $a0, numerator
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall

    li $v0, 1
    lw $a0, denominator
    syscall

    # print equal sign
    li $v0, 4
    la $a0, equal_symbol
    syscall

    # print simplified numerator 
    li $v0, 1
    move $a0, $t1
    syscall

    # print / 
    li $v0, 4
    la $a0, divide_symbol
    syscall 

    # print simplified denominator
    li $v0, 1
    move $a0, $t2
    syscall
    # Show menu 
    li $v0, 4
    la $a0, decimal_sms
    syscall
    
    # Read menu Option
    li $v0, 5
    syscall 
    move $t0, $v0
    # jump to decimal form 
    beq $t0, 1, todecimal
    j main

PrintInteger:
    # Print the original fraction as an integer result
    li $v0, 1
    lw $a0, numerator
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall

    li $v0, 1
    lw $a0, denominator
    syscall

    li $v0, 4
    la $a0, equal_symbol
    syscall

    # Print the numerator as the integer result
    li $v0, 1
    move $a0, $t1
    syscall

    j main

Add: 
    # Load numerators and denominators
    lw $t1, numerator
    lw $t2, denominator
    lw $t3, numerator+4
    lw $t4, denominator+4

    # Print the original fractions for addition
    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    li $v0, 4
    la $a0, add_symbol
    syscall 

    li $v0, 1
    move $a0, $t3
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t4
    syscall

    li $v0, 4
    la $a0, equal_symbol
    syscall 

    # check if denominator is equal 
    beq $t2, $t4, AddBaseCase

    # different denominator case 
    # Calculate denominator of resulting fraction. (b * d) 
    mul $t5, $t2, $t4

    # Calculate left sum numerator of resulting fraction  ( a * d) 
    mul $t7, $t1, $t4

    # calculate right sum numerator of resulting fraction  ( b * c) 
    mul $t8, $t3, $t2 

    # Calculate numerator of resulting fraction (a*d + b*c) 
    add $t6, $t7, $t8 

    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print results 
    j PrintAdd

AddBaseCase:
    # Add numerators
    add $t6, $t1, $t3

    # init denominator
    move $t5, $t2
    
    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print result
    j PrintAdd

PrintAdd: 
    # Print the result after simplification
    lw $t1, numerator
    lw $t2, denominator

    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall
    j main

Subtract: 
    # Load numerators and denominators
    lw $t1, numerator
    lw $t2, denominator
    lw $t3, numerator+4
    lw $t4, denominator+4

    # Print the original fractions for subtraction
    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    li $v0, 4
    la $a0, sub_symbol
    syscall 

    li $v0, 1
    move $a0, $t3
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t4
    syscall

    li $v0, 4
    la $a0, equal_symbol
    syscall 

    # check if denominator is equal 
    beq $t2, $t4, SubtractBaseCase

    # different denominator case 
    # Calculate denominator of resulting fraction. (b * d) 
    mul $t5, $t2, $t4

    # Calculate left sum numerator of resulting fraction  ( a * d) 
    mul $t7, $t1, $t4

    # calculate right sum numerator of resulting fraction  ( b * c) 
    mul $t8, $t3, $t2 

    # Calculate numerator of resulting fraction (a*d - b*c) 
    sub $t6, $t7, $t8 

    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print results 
    j PrintSubtract

SubtractBaseCase:
    # Subtract numerators
    sub $t6, $t1, $t3

    # init denominator
    move $t5, $t2
    
    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print result
    j PrintSubtract

PrintSubtract: 
    # Print the result after simplification
    lw $t1, numerator
    lw $t2, denominator

    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    j main

Multiply: 
    # Load numerators and denominators
    lw $t1, numerator
    lw $t2, denominator
    lw $t3, numerator+4
    lw $t4, denominator+4

    # Print the original fractions for multiplication
    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    li $v0, 4
    la $a0, mult_symbol
    syscall 

    li $v0, 1
    move $a0, $t3
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t4
    syscall

    li $v0, 4
    la $a0, equal_symbol
    syscall 

    # Multiply numerators 
    mul $t6, $t1, $t3

    # Multiply denominators 
    mul $t5, $t2, $t4
    
    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print result
    j PrintMultiply

PrintMultiply: 
    # Print the result after simplification
    lw $t1, numerator
    lw $t2, denominator

    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    j main

Divide: 
    # Load numerators and denominators
    lw $t1, numerator
    lw $t2, denominator
    lw $t3, numerator+4
    lw $t4, denominator+4

    # Print the original fractions for division
    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    li $v0, 4
    la $a0, div_symbol
    syscall 

    li $v0, 1
    move $a0, $t3
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t4
    syscall

    li $v0, 4
    la $a0, equal_symbol
    syscall 

    # multiply first fraction by the reciprocal of the second fraction 
    # Multiply numerators 
    mul $t6, $t1, $t4

    # Multiply denominators 
    mul $t5, $t2, $t3
    
    # Simplify the result
    sw $t6, numerator
    sw $t5, denominator
    jal Simplify

    # Print result
    j PrintDivide

PrintDivide: 
    # Print the result after simplification
    lw $t1, numerator
    lw $t2, denominator

    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, divide_symbol
    syscall 

    li $v0, 1
    move $a0, $t2
    syscall

    j main

Undetermined: 
    # Show error message
    li $v0, 4
    la $a0, error1_sms
    syscall 
    j main
    
todecimal:
   # convert to decimal 
    mtc1 $t1, $f4           
    mtc1 $t2, $f6          
    cvt.s.w $f4, $f4       
    cvt.s.w $f6, $f6     
    # divide num and denom 
    div.s $f0, $f4, $f6     
    # print decimal 
    li $v0, 2
    mov.s $f12, $f0
    syscall
    # jump to main 
    j main 
    

